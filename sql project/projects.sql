
use project;
-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
 sup_id TINYINT PRIMARY KEY,
 sup_name VARCHAR(255),
 address TEXT
);
-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
 cat_id TINYINT PRIMARY KEY,
 cat_name VARCHAR(255)
);
-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
 emp_id TINYINT PRIMARY KEY,
 emp_name VARCHAR(255),
 hire_date VARCHAR(255)
);

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
 cust_id SMALLINT PRIMARY KEY,
 cust_name VARCHAR(255),
 address TEXT
);
-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
 prod_id TINYINT PRIMARY KEY,
 prod_name VARCHAR(255),
 sup_id TINYINT,
 cat_id TINYINT,
 price DECIMAL(10,2),
 FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
 ON UPDATE CASCADE ON DELETE CASCADE,
 FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
 ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
 ord_id SMALLINT PRIMARY KEY,
 cust_id SMALLINT,
 emp_id TINYINT,
 order_date VARCHAR(255),
 FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
 ON UPDATE CASCADE ON DELETE CASCADE,
 FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
 ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS order_details (
 ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
 ord_id SMALLINT,
 prod_id TINYINT,
 quantity TINYINT,
 each_price DECIMAL(10,2),
 total_price DECIMAL(10,2),
 FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
 ON UPDATE CASCADE ON DELETE CASCADE,
 FOREIGN KEY (prod_id) REFERENCES products(prod_id)
 ON UPDATE CASCADE ON DELETE CASCADE
);


-- 1. Customer Insights 
-- Gain an understanding of customer engagement and purchasing behavior. 
-- How many unique customers have placed orders? 
-- Which customers have placed the highest number of orders? 
-- What is the total and average purchase value per customer? 
-- Who are the top 5 customers by total purchase amount? 
select * from project.orders;
-- 1 orders table
select count(distinct emp_id) from project.orders;
-- 2
SELECT emp_id,ordercount
FROM (
    SELECT emp_id,COUNT(*) AS ordercount
    FROM orders
    GROUP BY emp_id
) as sub
WHERE ordercount = (
    SELECT MAX(ordercount)
    FROM (
        SELECT emp_id,COUNT(*) AS ordercount
        FROM orders
        GROUP BY emp_id
    ) as counter
);
select c.cust_id,c.Cust_name,
sum(od.total_price) as total_purchase,
avg(od.total_price) as average_purchase 
from customers c
join orders o on c.cust_id = o.cust_id
join order_details od on o.ord_id = od.ord_id
group by cust_id,cust_name;

-- 3. What is the total and average purchase value per customer? 

select c.cust_id,c.Cust_name,
sum(od.total_price) as total_purchase,
avg(od.total_price) as average_purchase 
from customers c
join orders o on c.cust_id = o.cust_id
join order_details od on o.ord_id = od.ord_id
group by cust_id,cust_name;

-- 4. Who are the top 5 customers by total purchase amount?

select c.cust_id, c.cust_name,
sum(od.total_price) as total_purchase_amount
from customers c
join orders o on c.cust_id = o.cust_id
join order_details od on o.ord_id = od.ord_id
group by c.cust_id,c.cust_name
order by total_purchase_amount desc
limit 5;

      -- 2. Product Performance

-- Evaluate how well products are performing in terms of sales and revenue.

-- 1. How many products exist in each category?

select c.cat_id, c.cat_name,
count(p.prod_id) as total_products
from categories c
join products p on c.cat_id = p.cat_id    
group by c.cat_id,c.cat_name;
 
 -- 2. What is the average price of products by category?   
 
select c.cat_id,c.cat_name,
avg(p.price) as avg_price
from categories c
join products p on c.cat_id = p.cat_id
group by c.cat_id,c.cat_name;  
  
-- 3. Which products have the highest total sales volume (by quantity)?
select p.prod_id, p.prod_name,
sum(od.quantity) as total_quantity
from products p
join order_details od on p.prod_id = od.prod_id
group by p.prod_id, p.prod_name
order by total_quantity desc;
    
-- 4. What is the total revenue generated by each product?

select p.prod_id, p.prod_name,
sum(od.total_price) as total_revenue
from products p
join order_details od on p.prod_id = od.prod_id
group by p.prod_id, p.prod_name
order by total_revenue desc;
    
-- 5. How do product sales vary by category and supplier?   
select c.cat_name, s.sup_name,
SUM(od.quantity) as total_units_sold,
SUM(od.total_price) as total_revenue
from order_details od
join products p on od.prod_id = p.prod_id
join categories c on p.cat_id = c.cat_id
join supplier s on p.sup_id = s.sup_id
group by c.cat_name, s.sup_name
order by c.cat_name, total_revenue desc;
 
 -- 3. Sales and Order Trends
 
-- Analyze business performance through orders and revenue over time.

-- 1. How many orders have been placed in total?
select count(*) as total_orders
from orders; 
 
-- 2. What is the average value per order?
select avg(total_order) as average_order
from (
select ord_id, sum(total_price) as total_order
from order_details
group by ord_id) as total_orders;

-- 3. On which dates were the most orders placed?
select order_date, count(ord_id) as total_orders
from orders
group by order_date
order by total_orders desc;
    
-- 4. What are the monthly trends in order volume and revenue?    
select 
date_format(str_to_date(o.order_date, '%c/%e/%Y'), '%Y-%m') AS month,
count(distinct o.ord_id) as order_count,
sum(od.total_price) as total_revenue
from orders o
join order_details od ON o.ord_id = od.ord_id
group by month
order by month;

-- 5. How do order patterns vary across weekdays and months?
select 
    dayname(str_to_date(o.order_date, '%c/%e/%Y')) as weekday,
    monthname(str_to_date(o.order_date, '%c/%e/%Y')) as month,
    count(*) as order_count
from orders o
group by weekday, month
order by field(weekday, 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'),
         field(month, 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December');

-- 4 Supplier Contribution
 
-- How many suppliers are there in the database?
 select count(*) from supplier ;

-- Which supplier provides the most products?

select s.sup_name, count(p.prod_id) as product_count
from supplier s
join products p on s.sup_id = p.sup_id
group by s.sup_id, s.sup_name
order by product_count desc
limit 1;

-- What is the average price of products from each supplier?

select s.sup_name , avg(p.price) as average_product_price 
from supplier s
join products p on s.sup_id = p.sup_id
group by s.sup_id , s.sup_name ;

-- Which suppliers contribute the most to total product sales (by revenue)?

select s.sup_name , SUM(p.price * od.quantity) as total_revenue
from supplier s 
join products p ON s.sup_id = p.sup_id
JOIN order_details od ON p.prod_id = od.prod_id
group by s.sup_id, s.sup_name
Order by total_revenue desc
limit 2;

-- 5) Employee Performance

-- How many employees have processed orders?

Select COUNT(DISTINCT o.emp_id) AS number_of_employees_who_processed_orders
FROM orders o ;

 -- Which employees have handled the most orders?
 
 select emp_name , count(o.ord_id) as total_orders_handled
 from employees e
 join orders o ON e.emp_id = o.emp_id
 group by e.emp_id,e.emp_name
 order by total_orders_handled desc
 limit 5;
 
 -- What is the total sales value processed by each employee?
 
 select e.emp_id,e.emp_name,
SUM(od.total_price) as total_sales_value
FROM employees e
JOIN orders o ON e.emp_id = o.emp_id
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY e.emp_id, e.emp_name
ORDER BY total_sales_value DESC;
 
 -- What is the average order value handled per employee?
 
select e.emp_id,e.emp_name,
SUM(od.total_price)/count(distinct o.ord_id) as avg_order_value_per_emp
from employees e
join orders o on e.emp_id = o.emp_id
join order_details od on o.ord_id = od.ord_id
group by e.emp_id,e.emp_name
order by avg_order_value_per_emp desc;

-- 6Ô∏è. Order Details Deep Dive

-- 1. What is the relationship between quantity ordered and total price?

select quantity,
avg(total_price) as average_total_price,
count(*) as no_of_orders
from order_details
group by quantity
order by quantity;

-- 2. What is the average quantity ordered per product?

select p.prod_id, p.prod_name,
avg(od.quantity) as average_quantity_per_product
from products p
join order_details od on p.prod_id = od.prod_id
group by p.prod_id,p.prod_name
order by average_quantity_per_product desc;




